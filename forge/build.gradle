configurations { shadow }
architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    useFabricMixin = true
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.minecraft_version}-${rootProject.forge_version}"
    // Remove the next line if you don't want to depend on the API
    modCompile "me.shedaniel:architectury-forge:${rootProject.architectury_version}"

    // Extra dependencies
    implementation "thedarkcolour:kotlinforforge:${rootProject.forge_kotlin_version}"
    modImplementation "me.shedaniel.cloth:cloth-config-forge:${rootProject.cloth_config_version}"
    modImplementation "software.bernie.geckolib:geckolib-forge-${rootProject.forge_geckolib_version}"
    compileOnly("mezz.jei:jei-${rootProject.forge_jei_version}:api")
    modRuntime("mezz.jei:jei-${rootProject.forge_jei_version}")

    implementation(project(path: ":common")) {
        transitive = false
    }
    developmentForge(project(path: ":common")) {
        transitive = false
    }
    shadow(project(path: ":common", configuration: "transformProductionForge")) {
        transitive = false
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"

    configurations = [project.configurations.shadow]
    classifier "shadow"
}

remapJar {
    dependsOn(shadowJar)
    input.set(shadowJar.archivePath)
    classifier "forge"
}