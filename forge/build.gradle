plugins {
    id "com.github.johnrengelman.shadow"
}

configurations {
    shadowCommon
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    useFabricMixin = true
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.minecraft_version}-${rootProject.forge_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "me.shedaniel:architectury-forge:${rootProject.architectury_version}"
    //modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"

    // Extra dependencies
    implementation "thedarkcolour:kotlinforforge:${rootProject.forge_kotlin_version}"
    modImplementation "me.shedaniel.cloth:cloth-config-forge:${rootProject.cloth_config_version}"
    modImplementation "software.bernie.geckolib:geckolib-forge-${rootProject.forge_geckolib_version}"
    compileOnly("mezz.jei:jei-${rootProject.forge_jei_version}:api")
    modRuntime("mezz.jei:jei-${rootProject.forge_jei_version}")

    implementation(project(path: ":common")) { transitive = false }
    developmentForge(project(path: ":common")) { transitive = false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

processResources {
    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
    inputs.property "version", project.version
}

shadowJar {
    exclude "fabric.mod.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier "forge"
}

jar {
    classifier "dev"
}

java {
    withSourcesJar()
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}