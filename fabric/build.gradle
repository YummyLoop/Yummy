configurations { shadow }
architectury {
    platformSetupLoomIde()
    fabric()
}

loom{
    mixinConfigs = ["mixin.examplemod.json", "mixin.examplemod.fabric.json"]
}

dependencies {
    modCompile "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modCompile "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    // Remove the next line if you don't want to depend on the API
    modCompile "me.shedaniel:architectury-fabric:${rootProject.architectury_version}"

    // Extra dependencies
    modImplementation "net.fabricmc:fabric-language-kotlin:${rootProject.fabric_kotlin_version}"
    modImplementation "com.terraformersmc:modmenu:${rootProject.fabric_mod_ModMenu}"
    modCompileOnly("me.shedaniel:RoughlyEnoughItems-api:${rootProject.fabric_mod_REI}") { exclude(module: "config-2") }
    modRuntime("me.shedaniel:RoughlyEnoughItems:${rootProject.fabric_mod_REI}") { exclude(module: "config-2") }
    modImplementation "me.shedaniel.cloth:cloth-config-fabric:${rootProject.cloth_config_version}"
    modImplementation "software.bernie.geckolib:geckolib-fabric-${rootProject.fabric_geckolib_version}:dev"

    implementation(project(path: ":common")) {
        transitive = false
    }
    developmentFabric(project(path: ":common")) {
        transitive = false
    }
    shadow(project(path: ":common", configuration: "transformProductionFabric")) {
        transitive = false
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadow]
    classifier "shadow"
}

remapJar {
    dependsOn(shadowJar)
    input.set(shadowJar.archivePath)
    classifier "fabric"
}