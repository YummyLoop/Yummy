plugins {
    id "architectury-plugin"
    id "dev.architectury.loom" apply false
    id "org.jetbrains.kotlin.jvm"
    id "org.jetbrains.kotlin.plugin.serialization"
    id "com.github.johnrengelman.shadow"
}

architectury {
    minecraft = rootProject.minecraft_version
}

subprojects {
    apply plugin: "dev.architectury.loom"
    apply plugin: "org.jetbrains.kotlin.jvm"
    apply plugin: "org.jetbrains.kotlin.plugin.serialization"
    apply from: "${rootDir}/repositories.gradle"

    //libsDirName = "../out" // Output location of jar instead of default build/libs

    // Source files location, currently makes the source location for java and kotlin the same
    sourceSets {
        main.kotlin.srcDirs += 'src/main'
        main.java.srcDirs += 'src/main'
    }
    //compileKotlin { kotlinOptions { jvmTarget = "1.16" } }

    loom {
        silentMojangMappingsLicense()
        mixinConfigs = ["mixin.examplemod.json"]
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"

        //mappings loom.officialMojangMappings()
        mappings "net.fabricmc:yarn:${rootProject.yarn_mappings}:v2"

        implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${rootProject.kotlinx_coroutines_core_version}"
        implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:${rootProject.kotlinx_serialization_json_version}"
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"

    archivesBaseName = rootProject.archives_base_name
    version = "${rootProject.mod_version}_${rootProject.minecraft_version}"
    group = rootProject.maven_group

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.release = 8
    }

    java {
        withSourcesJar()
    }

    jar {
        manifest {
            attributes([
                    "Title"    : "${rootProject.archives_base_name}",
                    "Version"  : "${rootProject.mod_version}",
                    "Author"   : "${rootProject.mod_author}",
                    "Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
            ])
        }
    }
}

task getJars(type: Copy) {
    dependsOn ':fabric:build'
    dependsOn ':forge:build'

    from('fabric/.build/libs') {
        include "*-fabric.jar"
    }
    from('forge/.build/libs') {
        include "*-forge.jar"
    }
    into "out"
}


